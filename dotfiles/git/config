# vim: ft=gitconfig
[alias]
  amend = "commit --amend --no-edit"
  reword = "commit --amend --only" # --only means staged changes aren't included
  force = "push --force-with-lease --force-if-includes"

  unstage = "restore --staged"
  history = "log --patch"

  # --soft is needed - means that `undo` will put the undone changes into
  # staging, and `redo` will commit only the staged changes you just undid.
  undo = "reset --soft HEAD^"
  redo = "reset --soft HEAD^"

  # Patch versions of add, unstage, and goback
  hire = "add --patch"
  fire = "unstage --patch"
  kill = "goback --patch"

  # Inverse of `--intent-to-add` from `git add`. Unadd the existence of all new files.
  # I make a modification to also unstage deleted files, see my post in the conversation
  # https://stackoverflow.com/questions/12994197/how-to-remove-only-intent-to-add-files-from-index-in-git
  unstage-new-files = "!cat <(git diff --name-only --diff-filter=A -z) <(git diff --staged --name-only --diff-filter=D -z) | git restore --staged -q --pathspec-file-nul --pathspec-from-file=- >/dev/null 2>&1"

  # Prettier formatting for `git branch`
  pbranch = "branch --sort=-committerdate --format '%(color:dim white)%(objectname:short)%(color:reset) |%(color:green)%(HEAD)%(color:bold yellow)%(align:22,left)%(refname:short)%(end)%(color:reset) | %(color:cyan)%(align:14,right)%(committerdate:relative)%(end)%(color:reset)%0a--------------------------------------------------'"

  # Switch to branch using fzf. Reference links below
  # https://esc.sh/blog/switch-git-branches-fzf/
  # https://github.com/erees1/dotfiles/blob/b29a94e/git/aliases.zsh#L85-L97
  pswitch = "!git pbranch --color | \
    fzf --delimiter='\\|' --preview-window='bottom' \
    --preview='echo {s2} | cut -c 2- | xargs git show --color | diff-so-fancy' | \
    cut -d '|' -f2 | cut -c 2- | xargs git switch"

[apply]
  whitespace = "error"

[branch]
  sort = "-committerdate"

[commit]
  verbose = true # Prevent merging if changes are trivial, but if they're not, require an explicit merge

[core]
  excludesFile = "~/.config/git/ignore"

  # TODO: don't hardcode less options
  pager = "less --RAW-CONTROL-CHARS --wordwrap --clear-screen -+F"

[credential "https://gist.github.com"]
  helper = !gh auth git-credential

[credential "https://github.com"]
  helper = !gh auth git-credential

[diff]
  algorithm = "histogram"
  colorMoved = true
  renames = "copies"
  tool = "difftastic"
  wsErrorHighlight = "all" # Highlight all whitespace errors, not just new ones

[diff-so-fancy]
  # So nothing else looks like `red reverse`
  markEmptyLines = false

[difftool]
  prompt = false

[difftool "difftastic"]
  cmd = difft --display inline "$MERGED" "$LOCAL" "abcdef1" "100644" "$REMOTE" "abcdef2" "100644"

[gpg]
  format = "openpgp"

[gpg "openpgp"]
  program = "gpg"

[init]
  defaultBranch = "main"

[interactive]
  diffFilter = diff-so-fancy --patch

[log]
  abbrevCommit = true # Show short version of commit hashes by default

[merge]
  conflictstyle = "diff3"
  directoryRenames = true # Renamed directories don't cause a merge conflict
  tool = "meld"

[mergetool "meld"]
  path = "meld"
  useAutoMerge = true

[pager]
  # Auto-select the start of each diffed file, so `n` and `N` will go between them
  # TODO: don't hardcode less options
  diff = diff-so-fancy | less --RAW-CONTROL-CHARS --wordwrap --clear-screen -+F --pattern '^(Date|added|deleted|modified|renamed):'

  difftool = true

[pull]
  ff = "only" # Prevent merging if changes are trivial, but if they're not, require an explicit merge

[push]
  autoSetupRemote = true
  default = "current" # Only push current branch, and don't force-push everything when force pushing
  useForceIfIncludes = true

[rebase]
  autoSquash = true # Treat commits with prepend messages (squash! fixup!) as they should be

[rerere]
  enabled = true

[user]
  email = "78693624+quatquatt@users.noreply.github.com"
  name = "Eman Resu"
